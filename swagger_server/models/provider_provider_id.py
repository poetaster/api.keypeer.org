# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ProviderProviderID(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, provider_id: str=None, keypeer_api_key: str=None, token: str=None):  # noqa: E501
        """ProviderProviderID - a model defined in Swagger

        :param provider_id: The provider_id of this ProviderProviderID.  # noqa: E501
        :type provider_id: str
        :param keypeer_api_key: The keypeer_api_key of this ProviderProviderID.  # noqa: E501
        :type keypeer_api_key: str
        :param token: The token of this ProviderProviderID.  # noqa: E501
        :type token: str
        """
        self.swagger_types = {
            'provider_id': str,
            'keypeer_api_key': str,
            'token': str
        }

        self.attribute_map = {
            'provider_id': 'provider_id',
            'keypeer_api_key': 'keypeer_api_key',
            'token': 'token'
        }
        self._provider_id = provider_id
        self._keypeer_api_key = keypeer_api_key
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'ProviderProviderID':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The provider_providerID of this ProviderProviderID.  # noqa: E501
        :rtype: ProviderProviderID
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provider_id(self) -> str:
        """Gets the provider_id of this ProviderProviderID.


        :return: The provider_id of this ProviderProviderID.
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id: str):
        """Sets the provider_id of this ProviderProviderID.


        :param provider_id: The provider_id of this ProviderProviderID.
        :type provider_id: str
        """
        if provider_id is None:
            raise ValueError("Invalid value for `provider_id`, must not be `None`")  # noqa: E501

        self._provider_id = provider_id

    @property
    def keypeer_api_key(self) -> str:
        """Gets the keypeer_api_key of this ProviderProviderID.


        :return: The keypeer_api_key of this ProviderProviderID.
        :rtype: str
        """
        return self._keypeer_api_key

    @keypeer_api_key.setter
    def keypeer_api_key(self, keypeer_api_key: str):
        """Sets the keypeer_api_key of this ProviderProviderID.


        :param keypeer_api_key: The keypeer_api_key of this ProviderProviderID.
        :type keypeer_api_key: str
        """
        if keypeer_api_key is None:
            raise ValueError("Invalid value for `keypeer_api_key`, must not be `None`")  # noqa: E501

        self._keypeer_api_key = keypeer_api_key

    @property
    def token(self) -> str:
        """Gets the token of this ProviderProviderID.


        :return: The token of this ProviderProviderID.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this ProviderProviderID.


        :param token: The token of this ProviderProviderID.
        :type token: str
        """
        if token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token
